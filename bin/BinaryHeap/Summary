1、需求分析
二叉堆使用于：添加元素O(log n)、获取元素最大值O(1)、删除元素最大值O(log n)
Top k :从海量数据中找出前K个数据

2、二叉堆
类型：最大堆、最小堆
底层实现：数组实现(因为二叉堆是完全二叉树)
elements:数组名称
element:二叉堆结点值

3、添加
将结点添加，elements[size++] = element;
然后将结点进行向上调整，直到根节点(也就是父节点的index=0)
4、删除
将最后一个结点覆盖根节点，然后删除最后一个结点
比较根节点和其子节点，选出子节点中最大的结点与其交换位置

5、替代(删除当前根结点并替代它)
首先用新结点覆盖根结点
然后进行向下调整，直到它是叶子结点

6、批量建堆
自上而下的上滤 O(nlogn)  --添加
for(int index = 1;index < size;index++){
    siftUp(index);
}
自下而上的下滤(效率高 O(n)) --删除
for(int index = (size >> 1)-1;index >=  0;index--){
     siftDown(index);
     }
     
7、Top K的问题
(1)以找出前k个最大数为例
——>新建一个小顶堆，遍历所有数据
——>先让k个数据入堆，然后从第k+1个数据与堆顶元素比较，如果该数大于堆顶元素，就用replace操作(删除堆顶元素，将k+1个元素添加到堆中)

(2)以找出前k个最小数为例
——>新建一个大顶堆，遍历所有数据
——>先让k个数据入堆，然后从第k+1个数据与堆顶元素比较，如果该数小于堆顶元素，就用replace操作(删除堆顶元素，将k+1个元素添加到堆中)
